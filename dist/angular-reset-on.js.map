{"version":3,"names":[],"mappings":"","sources":["angular-reset-on.js"],"sourcesContent":["/**\r\n * \"Reset on\" directive for Angular 1.0.0\r\n * \r\n * Reset a field when a given scope condition is true\r\n *\r\n * @author  Waldir J. Pereira Junior <waldirpereira@gmail.com>\r\n * https://github.com/waldirpereira/angular-reset-on\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('ng-reset-on', [])\r\n        .directive(\"ngResetOn\", ResetOn);\r\n\r\n    function ResetOn() {\r\n        return {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            link: function ($scope, element, attrs, ngModelCtrl) {\r\n                $scope.$watch(attrs.ngResetOn, function () {\r\n                    if (!$scope.$eval(attrs.ngResetOn)) \r\n                      return;\r\n                      \r\n                    if (!ngModelCtrl.$modelValue && typeof(ngModelCtrl.$modelValue) !== \"boolean\")\r\n                        return;\r\n\r\n                    if (Array.isArray(ngModelCtrl.$modelValue)) {\r\n                        //specific treatment for multiple uiSelect\r\n                        var uiSelect = element.controller('uiSelect');\r\n                        if (uiSelect && uiSelect.multiple)\r\n                            uiSelect.selected.length = 0;\r\n\r\n                        ngModelCtrl.$modelValue.length = 0;\r\n                    } else {\r\n                        ngModelCtrl.$setViewValue(undefined);\r\n                    }\r\n                    \r\n                    ngModelCtrl.$render();\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();"],"file":"angular-reset-on.js"}